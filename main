import os
import pyaudio
import wave
import numpy as np
import speech_recognition as sr
import time
import datetime
import pyttsx3
import pyautogui
import keyboard
import subprocess
import psutil
import webbrowser
import json
import sounddevice as sd
import speech_recognition as sr
import re
import json
import threading
from nlp import preprocess_command 
from pynput.keyboard import Controller, KeyCode, Key
import tkinter as tk

chrome_path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
is_paused = False

# Initializing the pyttsx3 engine
engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id)
# To adjust the speech rate
engine.setProperty('rate', 220) 

# Function to speak the given text
def speak(audio):
    engine.say(audio)
    engine.runAndWait()

# Function to check if a given process is running
def is_process_running(process_name):
    return any(process_name.lower() in p.name().lower() for p in psutil.process_iter(['name']))

# Loading commands from JSON
with open('commands.json', 'r') as file:
    commands = json.load(file)

# Function to pause the voice assistant
def pause_voice_assistant():
    global is_paused
    is_paused = not is_paused
    if is_paused:
        print("EVA paused.")
        speak("EVA Paused.")
    else:
        print("Resuming.")
        speak("Resuming.")

# Function to handle dynamic search
def handle_dynamic_search(text, commands):
    preprocessed_text = preprocess_command(text)

    for command_key, command_details in commands.items():
        if command_details.get('action') == 'dynamic_search' and command_key.lower() in preprocessed_text:
            pattern = re.compile(re.escape(command_key) + r'\s(.+)', re.IGNORECASE)
            match = pattern.search(preprocessed_text)
            if match:
                search_query = match.group(1).strip()
                search_url = command_details['base_url'].format(search_query)
                webbrowser.open(search_url)
                print(f"Searching for: {search_query}")
                return True
    return False

# Executing hotkey commands
def execute_hotkey(keys):
    # Dictionary mapping custom media command strings to virtual key codes
    media_key_vk = {
        'mediaPlayPause': 0xB3,
        'mediaStop': 0xB2,
        'mediaNextTrack': 0xB0,
        'mediaPrevTrack': 0xB1,
        'volumeMute': 0xAD,
        'volumeUp': 0xAF,
        'volumeDown': 0xAE
    }

    keyboard_controller = Controller()
    for key in keys:
        if key in media_key_vk:
            # If the key is a recognized media command, it will use its virtual key code
            vk = media_key_vk[key]
            keyboard_controller.press(KeyCode.from_vk(vk))
            keyboard_controller.release(KeyCode.from_vk(vk))
        else:
            # Handling other keys 
            if hasattr(Key, key):
                key_to_press = getattr(Key, key)
                keyboard_controller.press(key_to_press)
                keyboard_controller.release(key_to_press)
            else:
                print(f"Key {key} is not recognized or supported for direct execution.")

# Handling audio input and execute commands
def audio_callback(recognizer, audio, language_choice, is_paused):
    try:
        text = recognizer.recognize_google(audio, language=language_choice)
        preprocessed_text = preprocess_command(text)  # Preprocessing the text using the NLP processor
        print(f"Did you say '{text}'? This has been processed as '{preprocessed_text}'")

        # "exit" command
        if "exit" in preprocessed_text:
            print("Exiting. Goodbye!")
            speak("Exiting. Goodbye!")
            return False

        # "pause" command
        if "pause" in text.lower() and not is_paused:
            print("Paused. Say 'EVA' to resume.")
            speak("Paused. Say 'EVA' to resume.")
            return True  

        # Proceed with other commands if not paused
        if not is_paused:
            for command_key, command_details in commands.items():
                if command_key.lower() in text.lower():
                    action = command_details.get('action')
                    if action == 'subprocess':
                        subprocess_command = command_details.get('command', [])
                        subprocess.run(subprocess_command, shell=True)
                    if action == 'hotkey':
                        keys = command_details.get('keys', [])
                        execute_hotkey(keys)
                    elif action == 'dynamic_search':
                        search_query = text.replace(command_key, "", 1).strip()
                        search_url = command_details['base_url'].format(search_query)
                        webbrowser.open(search_url)
                        print(f"Searching for: {search_query}")
                    break
            else:
                print("Command not found. Please try again.")
        return None

    except sr.UnknownValueError:
        print("Audio could not be understood. Please try again.")
        return None  
    except sr.RequestError as e:
        print(f"Could not request results from Google Speech Recognition service; {e}")
        return None 

#Function to listen for the trigger word and activate the assistant
def listen_for_trigger_word(trigger_word="EVA"):
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source)
        print(f"{trigger_word} will activate upon hearing the trigger word. Please say '{trigger_word}' to activate.")
        speak(f"{trigger_word} will activate upon hearing the trigger word. Please say '{trigger_word}' to activate.")
        start_time = time.time()
        while True:
            try:
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=5) 
                recognized_text = recognizer.recognize_google(audio, language='en-US')
                print("Transcription: " + recognized_text)
                if trigger_word.lower() in recognized_text.lower():
                    print(f"{trigger_word} activated")
                    speak(f"{trigger_word} activated")
                    return True
                if time.time() - start_time > 300:  # Timeout after 5 minutes
                    print("Timeout reached. Exiting. Please relaunch the program.")
                    speak("Timeout reached. Exiting. Please relaunch the program.")
                    return False
                if speak == "exit" or "stop" in recognized_text.lower():
                    print("Exiting.")
                    speak("Exiting.")
                    return False
            except sr.WaitTimeoutError:
                print("Listening timeout, trying again...")
            except sr.UnknownValueError:
                print("I didn't catch that. Please try again")
            except sr.RequestError as e:
                print(f"Could not request results from Google Speech Recognition service; {e}")
                break

# Main function to execute the assistant
def start_voice_assistant():
    trigger_detected = listen_for_trigger_word('EVA')
    if not trigger_detected:
        print("EVA exiting")
        speak("EVA exiting")
        return  
    
    current_hour = datetime.datetime.now().hour
    greeting = "Good Morning!" if current_hour < 12 else "Good Afternoon!" if current_hour < 18 else "Good Evening!"

    print(greeting)
    speak(greeting)

    print("I am your Assistant EVA for today.")
    speak("I am your Assistant EVA for today.")

    recognizer = sr.Recognizer()
    print("Choose a language from English or Spanish to get started.")
    # Calling speak right after print to minimise delay
    speak("Choose a language from English or Spanish to get started.")
    language_choice = get_language_choice(recognizer)
    
    if speak == "exit" or "stop" in language_choice.lower():
        print("Exiting.")
        speak("Exiting.")
        return False

    if language_choice:
        message = f"You have selected {'English' if language_choice == 'en-US' else 'Spanish'}. I am ready to receive your commands."
        print(message)
        speak(message)
        continuous_listen_and_act(language_choice)
    else:
        print("Failed to select a language. Exiting.")
        speak("Failed to select a language. Exiting.")

#Function to get language choice from the user using speech recognition
def get_language_choice(recognizer):
    while True:
        try:
            with sr.Microphone() as source:
                print("Listening for language choice...")
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)
                choice = recognizer.recognize_google(audio).lower()
                if 'english' in choice:
                    return 'en-US'
                elif 'espaÃ±ol' in choice or 'spanish' in choice:
                    return 'es-ES'
                else:
                    speak("Sorry, I didn't understand. Please say English or Spanish.")
                    print("Sorry, I didn't understand. Please say English or Spanish.")
        except sr.UnknownValueError:
            speak("Sorry, I couldn't understand that. Please say English or Spanish.")
            print("Sorry, I couldn't understand that. Please say English or Spanish.")
        except sr.RequestError as e:
            print(f"Could not request results; {e}")

def listen_in_background(trigger_word="EVA"):
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()
    
    def callback(recognizer, audio):
        try:
            speech_as_text = recognizer.recognize_google(audio)
            if trigger_word.lower() in speech_as_text.lower():
                print("EVA activated")
                speak("EVA activated")

        except (sr.UnknownValueError, sr.RequestError):
            pass

    with microphone as source:
        recognizer.adjust_for_ambient_noise(source)
        stop_listening = recognizer.listen_in_background(microphone, callback)

    return stop_listening 

#Function to continuously listen for commands and act on them
def continuous_listen_and_act(language_choice):
    recognizer = sr.Recognizer()
    global is_paused
    paused = False  # Tracks whether EVA is paused
    
    while True:
        if not is_paused:
            print("Please say a command...")
            with sr.Microphone() as source:
                recognizer.adjust_for_ambient_noise(source)  # Adjusting for ambient noise can improve recognition
                audio = recognizer.listen(source, timeout=10, phrase_time_limit=10)
                # Pass paused state to audio_callback and receive pause control action
                pause_control = audio_callback(recognizer, audio, language_choice, paused)
                
                if pause_control == "stop":
                    break
                elif pause_control == "pause":
                    is_paused = True
                elif pause_control == "resume":
                    is_paused = False
        else:
            print("EVA is paused. Say 'EVA' to continue.")
            with sr.Microphone() as source:
                recognizer.adjust_for_ambient_noise(source)
                audio = recognizer.listen(source, timeout=10, phrase_time_limit=10)
                try:
                    recognized_text = recognizer.recognize_google(audio, language=language_choice)
                    print("Transcription: " + recognized_text)
                    
                    if "eva" in recognized_text.lower():
                        print("Resuming...")
                        speak("Resuming...")
                        paused = False  
                except sr.UnknownValueError:
                    print("Audio could not be understood. Please try again.")
                except sr.RequestError as e:
                    print(f"Could not request results from Google Speech Recognition service; {e}")

# Function to change the voice of the assistant
def change_voice():
    global voices
    current_voice = engine.getProperty('voice')
    if current_voice == voices[0].id:
        engine.setProperty('voice', voices[1].id)
        print("Voice changed.")
        speak("Voice changed..")
    else:
        engine.setProperty('voice', voices[0].id)
        print("Voice changed.")
        speak("Voice changed.")


if __name__ == "__main__":
    start_voice_assistant()
